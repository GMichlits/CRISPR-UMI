#!/usr/bin/perl

########################################################
# Calculate offtarget scores of a batch of gRNA regions
# IMP/IMBA Bioinformatics department
########################################################

use strict;
use List::Util qw(sum);

use Getopt::Long;

#taskID is generated by gridengine and is used to create smaller batches.
my $taskID="";

GetOptions("t=s"=>\$taskID
    );

#it's possible that subjobs fail. Hence check if re-run, if all 100 sequences of a batch are processed.
open(OF, "tmp/calcCDSofftarget/offTarget.$taskID.txt");
my $cnt=0;
foreach (<OF>)
{
    $cnt++;
}
close(OF);

exit if ($cnt == 100);


#select a batch of gDNA regions
open(SELECTED, "mergeData.2MM.new.txt");
my $cnt=1;
my $selected={};
while (<SELECTED>)
{
    my @fields = split "\t";
    $selected->{$fields[1]} = 1 if ( $cnt <= $taskID*100 && $cnt >= ($taskID*100)-99 );

    $cnt++;
}
close(SELECTED);

#get all sequences of gDNA region ($seqCnt) and of the batch ($seq)
open(GUIDE, "tmp/guide.fa");
my $seq={};
my $seqCnt={};
$cnt=1;
while (my $id=<GUIDE>) {
    chomp $id;
    $id =~ s/^>//;

    my $s = <GUIDE>;
    chomp $s;
	
    $seq->{$id} = $s if (exists($selected->{$id}));
    $seqCnt->{$s}++;

    $cnt++;
#    print STDERR "Sequences read: $cnt\n" if ($cnt % 100000 == 0);
}
close(GUIDE);

print STDERR "Read guides(". localtime() . "): " . scalar(keys(%$seq)) . "\n";
print STDERR "Sequences: " . scalar(keys(%$seqCnt)) . "\n";


#function in Inline C to compare strings
use Inline C => << 'COMPARE';
void find_ident(char* x, char* y) {
    int i;
    Inline_Stack_Vars;
    Inline_Stack_Reset;                                                         
    for(i=0; x[i] && y[i]; ++i) {
      if(x[i] == y[i]) {
        Inline_Stack_Push(sv_2mortal(newSViv(i)));
      }                              
    }
    Inline_Stack_Done;
  }                                                                             
COMPARE

my $scoreCnt = {};
$cnt = 0;
#loop through all sequences
foreach my $seq2 (keys %$seqCnt)
{
    my $sCnt = $seqCnt->{$seq2};

    #loop through sequences of batch
    foreach my $pos1 (keys %$seq)
    {
	my $seq1 = $seq->{$pos1};

	#find ident positions
	my @ident= find_ident($seq1, $seq2);

	#calculate offtarget score
	my @score = (1, 1, 1, 1, 1.8, 1.8, 1.8, 1.8, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2);
	my $s = sum @score[@ident];

	#check range of offtarget score
	if ($s <= 80)
	{
	    next;
	} elsif (int($s) == 100 )  {
	    $scoreCnt->{$pos1}->{95} += ($sCnt - 1) ; #the Seq itself;
	    $scoreCnt->{$pos1}->{90} += ($sCnt - 1) ; #the Seq itself;
	    $scoreCnt->{$pos1}->{80} += ($sCnt - 1) ; #the Seq itself;
	} elsif ($s > 95)  {
	    $scoreCnt->{$pos1}->{95} += $sCnt;
	    $scoreCnt->{$pos1}->{90} += $sCnt;
	    $scoreCnt->{$pos1}->{80} += $sCnt;
	} elsif ($s > 90)  {
	    $scoreCnt->{$pos1}->{90} += $sCnt;
	    $scoreCnt->{$pos1}->{80} += $sCnt;
	} else {
	    $scoreCnt->{$pos1}->{80} += $sCnt;
	}
    }
}


#write offtarget numbers
open(OUT, ">tmp/calcCDSofftarget/offTarget.$taskID.txt");
foreach my $pos (keys %$scoreCnt)
{
    my $c95 = exists($scoreCnt->{$pos}->{95}) ? $scoreCnt->{$pos}->{95} : 0;
    my $c90 = exists($scoreCnt->{$pos}->{90}) ? $scoreCnt->{$pos}->{90} : 0;
    my $c80 = exists($scoreCnt->{$pos}->{80}) ? $scoreCnt->{$pos}->{80} : 0;
    print OUT "$pos\t$c95\t$c90\t$c80\n";
}
close OUT;
